/***** CONFIG *****/
const FOLDER_ID  = '14YjDHjrcc12h4YIwjNnEpynnBNQwX_HC'; // Folder Drive tujuan PDF
const SHEET_ID   = '1pwtipJ4ajubUJYtTPHg738EPXu54gwwOlf5swktGKVo'; // Spreadsheet ID
const SHEET_NAME = 'Form Maintenance'; // Nama tab persis

/***** HTML include helper *****/
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/***** ROUTE *****/
function doGet() {
  // Pastikan file 'form.html' ada. Jika pakai 'index.html', ganti 'form' -> 'index'
  return HtmlService.createTemplateFromFile('form')
    .evaluate()
    .setTitle('Form Maintenance Store')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/***** API: Upload PDF & log ke Sheet *****/
function uploadPDF(base64Data, fileName, store, tanggal, teknisi) {
  const lock = LockService.getScriptLock();
  try {
    // --- Validasi input dasar ---
    if (!base64Data) throw new Error('Data PDF kosong.');
    if (!store || !tanggal || !teknisi) {
      throw new Error('Lengkapi Store, Tanggal, dan Teknisi.');
    }

    // --- Ambil resource utama ---
    const folder = DriveApp.getFolderById(FOLDER_ID); // akan throw kalau tidak ada
    const ss     = SpreadsheetApp.openById(SHEET_ID); // akan throw kalau tidak ada
    const sheet  = ss.getSheetByName(SHEET_NAME);
    if (!sheet) throw new Error('Sheet tidak ditemukan: ' + SHEET_NAME);

    // --- Lock biar appendRow tidak tabrakan ---
    lock.waitLock(20000);

    // --- Siapkan nama file aman & blob ---
    const now = new Date();
    const ts  = Utilities.formatDate(now, 'Asia/Jakarta', 'yyyy-MM-dd HH:mm:ss');
    const safeName = (fileName && String(fileName).trim())
      ? String(fileName).replace(/[\\/:*?"<>|]/g, '-')
      : `Maintenance_${Utilities.formatDate(now, 'Asia/Jakarta', 'yyyyMMdd_HHmmss')}.pdf`;

    const bytes = Utilities.base64Decode(base64Data);
    const blob  = Utilities.newBlob(bytes, 'application/pdf', safeName);

    // --- Buat file di Drive ---
    const file = folder.createFile(blob);
    // Optional meta
    file.setDescription(`Generated by Form Maintenance â€¢ ${ts} WIB`);

    // --- Tulis ke Sheet ---
    sheet.appendRow([ts, store, tanggal, teknisi, file.getUrl()]);

    return { success: true, url: file.getUrl() };
  } catch (err) {
    console.error('[uploadPDF] Error:', err);
    // Buat pesan lebih ramah
    let msg = String(err);
    if (msg.includes('Service denied') || msg.includes('Insufficient permissions')) {
      msg = 'Izin akses tidak cukup. Pastikan akun deploy punya akses ke folder & spreadsheet.';
    } else if (msg.includes('Folder') && msg.includes('not found')) {
      msg = 'Folder Drive tidak ditemukan. Cek FOLDER_ID.';
    } else if (msg.includes('You do not have permission')) {
      msg = 'Tidak punya akses ke Spreadsheet/Folder. Cek sharing & akun eksekusi web app.';
    }
    return { success: false, error: msg };
  } finally {
    try { lock.releaseLock(); } catch (e) {}
  }
}

/***** Cek cepat koneksi & izin dari Editor *****/
function ping() {
  const result = { ok: true };
  try {
    const folder = DriveApp.getFolderById(FOLDER_ID);
    result.folderName = folder.getName();
  } catch (e) {
    result.folderError = String(e);
  }
  try {
    const ss = SpreadsheetApp.openById(SHEET_ID);
    const sheet = ss.getSheetByName(SHEET_NAME);
    result.sheetFound = !!sheet;
  } catch (e) {
    result.sheetError = String(e);
  }
  return result;
}
